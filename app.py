import streamlit as st
from base64 import b64decode, b64encode
from time import ctime, sleep, time
from threading import Thread
import gzip, requests, json
from getFreeRoomsFromAde2 import AdeRequest

st.set_page_config(layout="wide")

global freeRooms
freeRooms = {}
try:
    j = requests.get("https://olivier-truong-ade-free-rooms.hf.space/api").text
    freeRooms = json.loads(j)
except:
    pass
if freeRooms == {}:
    Ade = AdeRequest()
    infos = Ade.getRoomsInfos()
    freeRooms = Ade.getCurrentsFreeRooms()

def import_allowed():
    global freeRooms
    tab = []
    for room in freeRooms:
        tab.append([room, freeRooms[room]["freeUntil"]])
    return tab

def import_response_data():
    global freeRooms
    tab = []
    for room in freeRooms:
        tab.append([room, freeRooms[room]["capacity"], freeRooms[room]["freeUntil"], freeRooms[room]["busy"]])
    return tab

def reloadData():
    global freeRooms
    while True:
        try:
            sleep(600)
            try:
                j = requests.get("https://olivier-truong-ade-free-rooms.hf.space/api").text
                freeRooms = json.loads(j)
            except:
                Ade = AdeRequest()
                infos = Ade.getRoomsInfos()
                freeRooms = Ade.getCurrentsFreeRooms()
            st.session_state['response_data'] = import_response_data()
            st.session_state['allowed'] = import_allowed()
            print("[+] Refresh Data From Ade")
        except Exception as e:
            print("Err. When reload:", e)

if 'response_data' not in st.session_state:
    st.session_state['response_data'] = import_response_data()
if 'allowed' not in st.session_state:
    st.session_state['allowed'] = import_allowed()

Thread(target=reloadData).start()

def busyUntil(tab):
    ts, te = tab
    return [f'{str(ts[0]).zfill(2)}h{str(ts[1]).zfill(2)}', f'{str(te[0]).zfill(2)}h{str(te[1]).zfill(2)}']

def responsesFrom(ip):
    responses = "\r\n\r\n"
    for resp in st.session_state['response_data']:
        if resp[0] == ip:
            responses += str(ip) + "    capacit√©: " + str(resp[1]) + "    disponible jusqu'√†: " + str(resp[2])
            if resp[3] != [] and resp[2] != "demain":
                responses  += "\noccup√©e entre:\n" + str("".join(busyUntil(x) for x in resp[3])) + "\r\n\r\n"
    return responses

col1, col2 = st.columns([2, 1], gap="large")

with col1:
    st.title("Salles Disponible ESIEE Paris")
    search_query = st.text_input("Rechercher une salle", "")
    cols = st.columns(6)
    filtered_rooms = [ip for ip in st.session_state['allowed'] if search_query.lower() in ip[0].lower()]
    for i, ip in enumerate(filtered_rooms):
        room_name = ip[0]
        if room_name in ["0110", "0210", "0160", "0260"]:
            room_name += " üèõÔ∏è"
        else:
            room_name += " üè´"
        with cols[i % 6].expander(f"{room_name}"):
            room_info = next((room for room in st.session_state['response_data'] if room[0] == ip[0]), None)
            if room_info:
                busy_periods = [busyUntil(x) for x in room_info[3]] if room_info[3] and ip[1] != "demain" else []
                busy_table = "\n ".join([f'- {start} et {end}' for start, end in busy_periods]) if busy_periods else "Aucune occupation"
                if busy_periods:
                    st.markdown(f"""
                        **Disponible jusqu'√†**: {ip[1]}  
                        **Capacit√©**: {room_info[1]}  
                        **Occup√©e entre**:  
                        \n{busy_table}
                    """)
                else:
                    st.markdown(f"""
                        **Disponible jusqu'√†**: {ip[1]}  
                        **Capacit√©**: {room_info[1]}  
                    """)

with col2:
    st.header("Explication")
    st.markdown("""
    Les salles pr√©sentes sont les salles libres. Le menu d√©roulant des salles indique jusqu'√† quand elles sont disponibles.
    Les salles avec l'√©moji üèõÔ∏è sont des amphith√©√¢tres, tandis que les autres salles avec l'√©moji üè´ sont des salles normales.
    """)

    st.header("Informations")
    st.markdown("""
    Vous trouverez ici, la liste des salles disponibles ou aucun cours n'a lieu en ce moment m√™me.
    
    Le fonctionnement est simple: ci-dessous une liste vous indique le num√©ro de la salle et l'heure jusqu'√†
    laquelle elle est disponible (avant le cours suivant). En cliquant sur un √©l√©ment de la liste,
    il est possible d'avoir des infos suppl√©mentaires comme la capacit√© th√©orique de la salle et la liste
    des heures auxquelles la salle se voit occup√©e. Je vous conseille de regarder ces infos juste pour vous
    assurer que l'estimation de disponibilit√© est correcte et √† le reporter √† olivier.truong@edu.esiee.fr
    si vous constatez que la corr√©lation est mauvaise. (avec des screenshots svp <3).
    """)
